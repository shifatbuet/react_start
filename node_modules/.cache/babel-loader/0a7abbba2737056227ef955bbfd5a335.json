{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_start\\\\src\\\\App.js\";\nimport React, { useState, Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        name: \"Rimon\",\n        age: 26\n      }, {\n        name: \"Shifat\",\n        age: 21\n      }, {\n        name: \"Baby\",\n        age: 2\n      }]\n    };\n\n    this.switchName = newName => {\n      console.log(newName);\n      this.setState({\n        persons: [{\n          name: newName,\n          age: 26\n        }, {\n          name: newName,\n          age: 21\n        }, {\n          name: \"Baby\",\n          age: 2\n        }]\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, \"Create TWO new components: UserInput and UserOutput\"), \"UserInput should hold an input element, UserOutput two paragraphs Output multiple UserOutput components in the App component (any paragraph texts of your choice) Pass a username (of your choice) to UserOutput via props and display it there Add state to the App component (=> the username) and pass the username to the UserOutput component Add a method to manipulate the state (=> an event-handler method) Pass the event-handler method reference to the UserInput component and bind it to the input-change event Ensure that the new input entered by the user overwrites the old username passed to UserOutput Add two-way-binding to your input (in UserInput) to also display the starting username Add styling of your choice to your components/ elements in the components - both with inline styles and \"), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \" This is really working \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.switchName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \" Switch name \"), /*#__PURE__*/React.createElement(Person, {\n      changed: this.switchName,\n      name: this.state.persons[0].name,\n      age: this.state.persons[0].age,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Person, {\n      click: this.switchName.bind(this, \"SEXYYY\"),\n      name: \"Miti\",\n      age: \"18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"She is so HOT\"), /*#__PURE__*/React.createElement(Person, {\n      name: \"Babu\",\n      age: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/react_start/src/App.js"],"names":["React","useState","Component","Person","App","state","persons","name","age","switchName","newName","console","log","setState","render","bind"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACNC,MAAAA,OAAO,EAAC,CACN;AAACC,QAAAA,IAAI,EAAC,OAAN;AAAcC,QAAAA,GAAG,EAAC;AAAlB,OADM,EAEN;AAACD,QAAAA,IAAI,EAAC,QAAN;AAAeC,QAAAA,GAAG,EAAC;AAAnB,OAFM,EAGN;AAACD,QAAAA,IAAI,EAAC,MAAN;AAAaC,QAAAA,GAAG,EAAC;AAAjB,OAHM;AADF,KADkB;;AAAA,SASzBC,UATyB,GASXC,OAAD,IAAW;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD,WAAKG,QAAL,CACE;AACEP,QAAAA,OAAO,EAAC,CACN;AAACC,UAAAA,IAAI,EAACG,OAAN;AAAcF,UAAAA,GAAG,EAAC;AAAlB,SADM,EAEN;AAACD,UAAAA,IAAI,EAACG,OAAN;AAAcF,UAAAA,GAAG,EAAC;AAAlB,SAFM,EAGN;AAACD,UAAAA,IAAI,EAAC,MAAN;AAAaC,UAAAA,GAAG,EAAC;AAAjB,SAHM;AADV,OADF;AAUD,KArByB;AAAA;;AAsB1BM,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADF,iyBADF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAZF,eAaE;AAAQ,MAAA,OAAO,EAAE,KAAKL,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAbF,eAcE,oBAAC,MAAD;AAAS,MAAA,OAAO,EAAE,KAAKA,UAAvB;AAAmC,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC,OAAX,CAAmB,CAAnB,EAAsBC,IAA/D;AAAqE,MAAA,GAAG,EAAE,KAAKF,KAAL,CAAWC,OAAX,CAAmB,CAAnB,EAAsBE,GAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,eAeE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKC,UAAL,CAAgBM,IAAhB,CAAqB,IAArB,EAA0B,QAA1B,CAAf;AAAoD,MAAA,IAAI,EAAC,MAAzD;AAAgE,MAAA,GAAG,EAAC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAfF,eAgBE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,MAAb;AAAoB,MAAA,GAAG,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF,CADF;AAoBD;;AA3CyB;;AA+C5B,eAAeX,GAAf","sourcesContent":["import React,{useState, Component} from 'react';\r\nimport './App.css';\r\nimport Person from './Person/Person';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    persons:[\r\n      {name:\"Rimon\",age:26},\r\n      {name:\"Shifat\",age:21},\r\n      {name:\"Baby\",age:2}\r\n    ]\r\n  };\r\n\r\n   switchName = (newName)=>{\r\n     console.log(newName);\r\n    this.setState(\r\n      {\r\n        persons:[\r\n          {name:newName,age:26},\r\n          {name:newName,age:21},\r\n          {name:\"Baby\",age:2}\r\n        ]\r\n      }\r\n    );\r\n\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>\r\n          <p>Create TWO new components: UserInput and UserOutput</p>\r\nUserInput should hold an input element, UserOutput two paragraphs\r\nOutput multiple UserOutput components in the App component (any paragraph texts of your choice)\r\nPass a username (of your choice) to UserOutput via props and display it there\r\nAdd state to the App component (=> the username) and pass the username to the UserOutput component\r\nAdd a method to manipulate the state (=> an event-handler method)\r\nPass the event-handler method reference to the UserInput component and bind it to the input-change event\r\nEnsure that the new input entered by the user overwrites the old username passed to UserOutput\r\nAdd two-way-binding to your input (in UserInput) to also display the starting username\r\nAdd styling of your choice to your components/ elements in the components - both with inline styles and </h1>\r\n        <h1> This is really working </h1>\r\n        <button onClick={this.switchName}> Switch name </button>\r\n        <Person  changed={this.switchName} name={this.state.persons[0].name} age={this.state.persons[0].age}/>\r\n        <Person click={this.switchName.bind(this,\"SEXYYY\")} name=\"Miti\" age=\"18\">She is so HOT</Person>\r\n        <Person name=\"Babu\" age=\"1\"/>\r\n      </div>\r\n    )\r\n  };\r\n  \r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}